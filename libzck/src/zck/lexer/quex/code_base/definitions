/* -*- C++ -*- vim: set syntax=cpp: 
 * (C) 2005-2017 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                
 *
 * NOTE: '__VA_ARGS__' in macros is avoided because at the time of
 *       this writing, even some prominent compilers choke on it. */
#ifndef __QUEX_INCLUDE_GUARD__DEFINITIONS
#define __QUEX_INCLUDE_GUARD__DEFINITIONS

#include<quex/code_base/asserts>
#include<quex/code_base/compatibility/stdint.h>
#include<quex/code_base/compatibility/stdbool-pseudo.h>

#ifndef    QUEX_NAMESPACE_QUEX 
#   define QUEX_NAMESPACE_QUEX         quex
#endif
#if ! defined(__QUEX_OPTION_PLAIN_C)
#   define QUEX_NAMESPACE_QUEX_OPEN   namespace QUEX_NAMESPACE_QUEX {
#   define QUEX_NAMESPACE_QUEX_CLOSE  }
#   define QUEXED_AUX2(NSP, X)        ::NSP::X
#   define QUEXED_AUX(NSP, X)         QUEXED_AUX2(NSP,X)
#   define QUEXED(X)                  QUEXED_AUX(QUEX_NAMESPACE_QUEX,X)
#   define QUEXED_DEF(X)              X
#else
#   define QUEX_NAMESPACE_QUEX_OPEN
#   define QUEX_NAMESPACE_QUEX_CLOSE
#   define QUEXED_AUX2(NSP, X)        NSP ## _ ## X
#   define QUEXED_AUX(NSP, X)         QUEXED_AUX2(NSP, X)
#   define QUEXED(X)                  QUEXED_AUX(QUEX_NAMESPACE_QUEX, X)
#   define QUEXED_DEF(X)              QUEXED_AUX(QUEX_NAMESPACE_QUEX, X)
#endif
#if defined( __cplusplus) && ! defined(__QUEX_OPTION_PLAIN_C)
#   define QUEX_MAP_THIS_TO_ME(CLASS)   CLASS* me = this; (void)me;
#else
#   define QUEX_MAP_THIS_TO_ME(CLASS)   /* 'me' already plays the role of 'this'.   */
#endif

#ifndef    QUEX_SETTING_DEBUG_OUTPUT_CHANNEL
#   define QUEX_SETTING_DEBUG_OUTPUT_CHANNEL __QUEX_STD_STDERR
#endif

#if defined(_MSC_VER) && _MSC_VER >= 1600
    /* Microsoft VisualStudio(tm) 2010, i.e. Version 1600:
     * Forget about the 'CRT security enhancements' for sprintf, fopen, and setbuf. */
#   pragma warning(disable: 4996)
#endif

#if ! defined(__QUEX_OPTION_PLAIN_C)
#   include <cstddef>  /* gets: size_t, ptrdiff_t */
#   include <cstring>  /* gets: memmove, memcpy   */
#   include <cstdio>   /* gets: fprintf           */
#   include <cstdlib>
#   include <stdexcept>
#   define __QUEX_STD_FILE     std::FILE
#   define __QUEX_STD_STDIN    stdin
#   define __QUEX_STD_STDERR   stderr
#   define __QUEX_STD_fopen    std::fopen
#   define __QUEX_STD_fclose   std::fclose
#   define __QUEX_STD_fprintf  std::fprintf
#   define __QUEX_STD_fread    std::fread 
#   define __QUEX_STD_fseek    std::fseek 
#   define __QUEX_STD_ftell    std::ftell 
#   define __QUEX_STD_memcpy   std::memcpy
#   define __QUEX_STD_memmove  std::memmove
#   define __QUEX_STD_memset   std::memset
#   define __QUEX_STD_memcmp   std::memcmp
#   define __QUEX_STD_printf   std::printf
#   define __QUEX_STD_sprintf  std::sprintf
#   define __QUEX_STD_strcmp   std::strcmp
#   define __QUEX_STD_strcpy   std::strcpy
#   define __QUEX_STD_strlen   std::strlen
#   define __QUEX_STD_malloc   std::malloc
#   define __QUEX_STD_free     std::free  

#   define QUEX_INLINE     inline
    /* Input handle type is determined automagically via templates */
#else
#   include <stddef.h>
#   include <string.h>  /* gets: memmove, memcpy     */
#   include <stdio.h>   /* gets: fprintf             */
#   include <stdlib.h>
#   define __QUEX_STD_FILE     FILE
#   define __QUEX_STD_STDIN    stdin
#   define __QUEX_STD_STDERR   stderr
#   define __QUEX_STD_fopen    fopen
#   define __QUEX_STD_fclose   fclose
#   define __QUEX_STD_fprintf  fprintf
#   define __QUEX_STD_fread    fread 
#   define __QUEX_STD_fseek    fseek 
#   define __QUEX_STD_ftell    ftell 
#   define __QUEX_STD_memcpy   memcpy
#   define __QUEX_STD_memmove  memmove
#   define __QUEX_STD_memset   memset
#   define __QUEX_STD_memcmp   memcmp
#   define __QUEX_STD_printf   printf
#   define __QUEX_STD_strcmp   strcmp
#   define __QUEX_STD_strcpy   strcpy
#   define __QUEX_STD_strlen   strlen
#   define __QUEX_STD_sprintf  sprintf
#   define __QUEX_STD_malloc   malloc
#   define __QUEX_STD_free     free  

#   define QUEX_INLINE             /* static */
#   define QUEX_INPUT_HANDLE_TYPE  /* stdio.h's */ FILE 
#endif

#define __QUEX_STD_strlcpy(DEST, SRC, MAX) QUEXED(strlcpy)((DEST), (SRC), (size_t)(MAX))
           
#ifndef QUEX_TYPE_DEFINITIONS_E_LOAD_RESULT
#define QUEX_TYPE_DEFINITIONS_E_LOAD_RESULT
typedef enum {
    E_LoadResult_DONE,              /* Complete or incomplete, load happened. */
    E_LoadResult_COMPLETE,          /* Load filled drain completely.          */
    E_LoadResult_INCOMPLETE,        /* Drain not filled completely.           */
    E_LoadResult_BAD_LEXATOM,       /* Encoding error in stream.              */
    E_LoadResult_NO_MORE_DATA,      /* No more data to fill drain.            */
    E_LoadResult_NO_SPACE_FOR_LOAD, /* No space to load content into.         */
    E_LoadResult_FAILURE,           /* General low-level load failure.        */ 
    E_LoadResult_VOID               /* General low-level load failure.        */ 
} E_LoadResult;
#endif

#define E_LoadResult_NAME(LR) \
            (  (LR) == E_LoadResult_DONE              ? "DONE"              \
             : (LR) == E_LoadResult_COMPLETE          ? "COMPLETE"          \
             : (LR) == E_LoadResult_INCOMPLETE        ? "INCOMPLETE"        \
             : (LR) == E_LoadResult_BAD_LEXATOM       ? "BAD LEXATOM"       \
             : (LR) == E_LoadResult_NO_MORE_DATA      ? "NO MORE DATA"      \
             : (LR) == E_LoadResult_NO_SPACE_FOR_LOAD ? "NO SPACE FOR LOAD" \
             : (LR) == E_LoadResult_FAILURE           ? "FAILURE"           \
             : (LR) == E_LoadResult_VOID              ? "VOID"              \
             :                                          "<error>")

#ifndef QUEX_TYPE_DEFINITIONS_E_ERROR
#define QUEX_TYPE_DEFINITIONS_E_ERROR
typedef enum {
    E_Error_Allocation_BufferMemory_Failed,
    E_Error_Allocation_ByteLoader_Failed,
    E_Error_Allocation_LexatomLoader_Failed,
    E_Error_Buffer_CannotAbsorbMoreContent,
    E_Error_Constructor_Accumulator_Failed,
    E_Error_Constructor_Counter_Failed,
    E_Error_Constructor_PostCategorizer_Failed,
    E_Error_IncludePopOnEmptyStack,
    E_Error_IncludePush_OnError,
    E_Error_InputName_Set_Failed,
    E_Error_NoHandler_OnBadLexatom,
    E_Error_NoHandler_OnEndOfStream,
    E_Error_NoHandler_OnFailure,
    E_Error_NoHandler_OnIndentationBad,
    E_Error_NoHandler_OnLoadFailure,
    E_Error_NoHandler_OnOverflow,
    E_Error_NoHandler_OnSkipRangeOpen,
    E_Error_None,
    E_Error_ProvidedExternal_Memory_Corrupt,
    E_Error_Reset_OnError,
    E_Error_TokenRepetitionNSetButNotSupportedByGeneratedCode,
    E_Error_TokenQueueNoMoreTokensAvailable,
    E_Error_Uninitialized,
    E_Error_UnitTest_Termination,
    E_Error_UserConstructor_Failed,
    E_Error_UserMementoPack_Failed,
    E_Error_UserReset_Failed
} E_Error;

#define E_Error_NAME(E) \
    (  (E) == E_Error_Allocation_BufferMemory_Failed     ? "Allocation_BufferMemory_Failed"     \
     : (E) == E_Error_Allocation_ByteLoader_Failed       ? "Allocation_ByteLoader_Failed"       \
     : (E) == E_Error_Allocation_LexatomLoader_Failed    ? "Allocation_LexatomLoader_Failed"    \
     : (E) == E_Error_Buffer_CannotAbsorbMoreContent     ? "Buffer_CannotAbsorbMoreContent"     \
     : (E) == E_Error_Constructor_Accumulator_Failed     ? "Constructor_Accumulator_Failed"     \
     : (E) == E_Error_Constructor_Counter_Failed         ? "Constructor_Counter_Failed"         \
     : (E) == E_Error_Constructor_PostCategorizer_Failed ? "Constructor_PostCategorizer_Failed" \
     : (E) == E_Error_IncludePopOnEmptyStack             ? "IncludePopOnEmptyStack"             \
     : (E) == E_Error_IncludePush_OnError                ? "IncludePush_OnError"                \
     : (E) == E_Error_InputName_Set_Failed               ? "InputName_Set_Failed"               \
     : (E) == E_Error_NoHandler_OnBadLexatom             ? "NoHandler_OnBadLexatom"             \
     : (E) == E_Error_NoHandler_OnEndOfStream            ? "NoHandler_OnEndOfStream"            \
     : (E) == E_Error_NoHandler_OnFailure                ? "NoHandler_OnFailure"                \
     : (E) == E_Error_NoHandler_OnIndentationBad         ? "NoHandler_OnIndentationBad"         \
     : (E) == E_Error_NoHandler_OnLoadFailure            ? "NoHandler_OnLoadFailure"            \
     : (E) == E_Error_NoHandler_OnOverflow               ? "NoHandler_OnOverflow"               \
     : (E) == E_Error_NoHandler_OnSkipRangeOpen          ? "NoHandler_OnSkipRangeOpen"          \
     : (E) == E_Error_None                               ? "None"                               \
     : (E) == E_Error_ProvidedExternal_Memory_Corrupt    ? "ProvidedExternal_Memory_Corrupt"    \
     : (E) == E_Error_Reset_OnError                      ? "Reset_OnError"                      \
     : (E) == E_Error_TokenRepetitionNSetButNotSupportedByGeneratedCode ? "TokenRepetitionNSetButNotSupportedByGeneratedCode" \
     : (E) == E_Error_TokenQueueNoMoreTokensAvailable    ? "TokenQueueNoMoreTokensAvailable" \
     : (E) == E_Error_Uninitialized                      ? "Uninitialized"                      \
     : (E) == E_Error_UnitTest_Termination               ? "UnitTest_Termination"               \
     : (E) == E_Error_UserConstructor_Failed             ? "UserConstructor_Failed"             \
     : (E) == E_Error_UserMementoPack_Failed             ? "UserMementoPack_Failed"             \
     : (E) == E_Error_UserReset_Failed                   ? "E_Error_UserReset_Failed"           \
     :                                                     "<Error Void>")

#define E_Error_MISSING_HANDLER_NAME(E) \
     (  (E) == E_Error_NoHandler_OnBadLexatom     ? "on_bad_lexatom"     \
      : (E) == E_Error_NoHandler_OnFailure        ? "on_failure"         \
      : (E) == E_Error_NoHandler_OnIndentationBad ? "on_indentation_bad" \
      : (E) == E_Error_NoHandler_OnLoadFailure    ? "on_load_failure"    \
      : (E) == E_Error_NoHandler_OnOverflow       ? "on_overflow"        \
      : (E) == E_Error_NoHandler_OnSkipRangeOpen  ? "on_skip_range_open" \
      :                                             (const char*)0)

#define E_Boolean_NAME(B) ((B == 0) ? "false" : "true")
#endif

/* Define the QUEX_TYPE_STREAM_POSITION at a central place, so that it is the
 * same when it is used in multiple analyzers compiled into one binary.      */
#ifndef    QUEX_TYPE_STREAM_POSITION
#   define QUEX_TYPE_STREAM_POSITION intmax_t
#endif

#define QUEX_MIN(X, Y)  ((X) < (Y) ? (X) : (Y))
#define QUEX_MAX(X, Y)  ((X) > (Y) ? (X) : (Y))

/* In cases, such as DLL compilation for some dedicated compilers, 
 * the classes need some epilog. If the user does not specify such
 * a thing, it must be empty.                                                */
#ifndef    QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG
#   define QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG
#endif

/* Hash Function:
 *
 * Using Dan Bernstein's 'dbj2' (published in comp.lang.c) which is extremely
 * fast but still behaves well. See Linear Congruential Generators for further
 * reading.                                                                  */
#define QUEX_HASH_INIT_VALUE  5381
#define QUEX_HASH_NEXT(H, C)  ((((H) << 5) + (H)) + (C))

/* Support of computed goto */
#ifdef QUEX_OPTION_COMPUTED_GOTOS
    typedef  void*     QUEX_TYPE_GOTO_LABEL;
#   define QUEX_GOTO_LABEL_VOID                       (QUEX_TYPE_GOTO_LABEL)(0x0)
#   define QUEX_LABEL(StateIndex)                     &&_##StateIndex 

#   define QUEX_GOTO_TERMINAL(LABEL)                  do { goto *LABEL; } while(0)

    /* If no computed gotos are used, then there are two state routers, one for forward
     * state routing and another for backward state routing. Thus, two macros for the same
     * thing are required.                                                                 */
#   define QUEX_GOTO_STATE(LABEL)                     do { goto *LABEL; } while(0)


#else
    typedef  int32_t  QUEX_TYPE_GOTO_LABEL;          /* > 0: DFA_State index
                                                      * < 0: Drop Out of a state abs(Label). */
#   define QUEX_GOTO_LABEL_VOID                      (QUEX_TYPE_GOTO_LABEL)(-1)
#   define QUEX_LABEL(StateIndex)                    StateIndex 

#   define QUEX_GOTO_TERMINAL(LABEL)      \
           do {                           \
               last_acceptance = LABEL;   \
               goto QUEX_TERMINAL_ROUTER; \
           } while(0)

#   define QUEX_GOTO_STATE(LABEL)           \
           do {                             \
              target_state_index = LABEL;   \
              goto QUEX_LABEL_STATE_ROUTER; \
           } while(0)
#endif

/* DELETE QUEX_GOTO_RELOAD' when safe */
#define QUEX_GOTO_RELOAD(RELOAD_LABEL, ON_SUCCESS, ON_FAIL)  \
           do { \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%s:%i:\tUSE of QUEX_GOTO_RELOAD -- SUPPOSED TO BE SUPERFLUOUS", __FILE__, __LINE__); \
           target_state_index      = QUEX_LABEL(ON_SUCCESS); \
           target_state_else_index = QUEX_LABEL(ON_FAIL);    \
           goto RELOAD_LABEL; } while (0)

#define __QUEX_PRINT_SOURCE_POSITION()                             \
        __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%s:%i:\t", __FILE__, (int)__LINE__) 

#if ! defined(__QUEX_OPTION_PLAIN_C)
#   define QUEX_ERROR_EXIT(Msg) \
           do { \
               __QUEX_PRINT_SOURCE_POSITION(); \
               throw std::runtime_error(Msg); \
           } while(0)
#else
#   define QUEX_ERROR_EXIT(Msg) \
           do { \
               __QUEX_PRINT_SOURCE_POSITION(); \
               __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%s", Msg); exit(-1); \
           } while(0)
#endif

#if defined(QUEX_OPTION_DEBUG_SHOW)

#   define __quex_debug(Str)                                        \
           __QUEX_PRINT_SOURCE_POSITION();                          \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%s", (Str)) 
#   define __quex_debug1(Str)                                       \
           __QUEX_PRINT_SOURCE_POSITION();                          \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%s\n", (Str)) 
#   define __quex_debug2(FormatStr, Arg)                            \
           __QUEX_PRINT_SOURCE_POSITION();                          \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, FormatStr "\n", Arg)
#   define __quex_debug3(FormatStr, Arg0, Arg1)                     \
           __QUEX_PRINT_SOURCE_POSITION();                          \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, FormatStr "\n", Arg0, Arg1)
#   define __quex_debug4(FormatStr, Arg0, Arg1, Arg2)               \
           __QUEX_PRINT_SOURCE_POSITION();                          \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, FormatStr "\n", Arg0, Arg1, Arg2)

#   define __QUEX_PRINT_CHAR(C)                             \
             (C) == '\n' ? __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%02X '\\n'\n", (int)(C)) \
           : (C) == '\t' ? __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%02X '\\t'\n", (int)(C)) \
           : (C) == '\r' ? __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%02X '\\r'\n", (int)(C)) \
           : (C) == '\a' ? __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%02X '\\a'\n", (int)(C)) \
           : (C) == '\v' ? __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%02X '\\v'\n", (int)(C)) \
           :               __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "%02X '%c'\n",  (int)(C), (C) < 0xFF ? (char)(C) : '?')

#   define __quex_debug_core(StateIdx, Message)                \
           __quex_debug3("state %i ____%s", (int)(StateIdx), (Message)) 

#   define __quex_debug_input(StateIdx)                                            \
           __quex_debug("input:           ");                                      \
           __QUEX_PRINT_CHAR(*(me->buffer._read_p));                              \
           __quex_debug2("input position:  %i",                                    \
                         (int)(me->buffer._read_p - me->buffer._memory._front));  \
           __quex_optional_statistics((StateIdx))

#   define __quex_debug_path_walker_core(PathWalkerIdx, PathBase, PathIterator, Message)             \
           __quex_debug_core(__QUEX_DEBUG_MAP_STATE_KEY_TO_STATE(PathIterator-PathBase), (Message)); \
           __quex_assert(PathIterator <  &PathBase[sizeof(PathBase)/sizeof(QUEX_TYPE_LEXATOM)]);   \
           __quex_assert(PathIterator >= &PathBase[0]);                                              \
           __quex_debug4("(path walker: %i, path: %i, offset: %i)",                                  \
                         (int)PathWalkerIdx,                                                         \
                         (int)__QUEX_DEBUG_MAP_PATH_BASE_TO_PATH_ID(PathBase),                       \
                         (int)(PathIterator-PathBase)); 

#   define __quex_debug_template_core(TemplateIdx, StateKey, Message)                     \
           __quex_debug_core(__QUEX_DEBUG_MAP_STATE_KEY_TO_STATE(StateKey), (Message));   \
           __quex_assert(__QUEX_DEBUG_MAP_STATE_KEY_TO_STATE(StateKey) != 0);             \
           __quex_debug3("(template: %i, state key=%i)", (int)TemplateIdx, (int)StateKey)

#   define __quex_debug_state(StateIdx)                \
           __quex_debug_core(StateIdx, "__________");  \
           __quex_debug_input(StateIdx)

#   define __quex_debug_path_walker_state(PathWalkerIdx, PathBase, PathIterator)               \
           __quex_debug_path_walker_core(PathWalkerIdx, PathBase, PathIterator, "__________"); \
           __quex_debug_input(__QUEX_DEBUG_MAP_STATE_KEY_TO_STATE(PathIterator-PathBase))

#   define __quex_debug_template_state(TemplateIdx, StateKey)                      \
           __quex_debug_template_core(TemplateIdx, StateKey, "__________");        \
           __quex_debug_input(__QUEX_DEBUG_MAP_STATE_KEY_TO_STATE(StateIdx))

#   define __quex_debug_drop_out(StateIdx)            \
           __quex_debug_core(StateIdx, "<DROP OUT>");  

#   define __quex_debug_path_walker_drop_out(PathWalkerIdx, PathBase, PathIterator) \
           __quex_debug_path_walker_core(PathWalkerIdx, PathBase, PathIterator, "<DROP OUT>")        

#   define __quex_debug_template_drop_out(TemplateIdx, StateKey)            \
           __quex_debug_template_core(TemplateIdx, StateKey, "<DROP OUT>")           

#   define __quex_debug_buffer_info(B)                                         \
           __quex_debug2("input position:  %i",                                \
                         (int)((B)._read_p        - (B)._memory._front + 1)); \
           __quex_debug2("lexeme start:    %i",                                \
                         (int)((B)._lexeme_start_p - (B)._memory._front + 1)); \
           __quex_debug2("buffer size:     %i",                                \
                         (int)((B)._memory._back   - (B)._memory._front)); 

#   define __quex_debug_reload_before()                              \
           __quex_debug1("reload ________________");                 \
           __quex_debug2("fallback bytes:  %i",                      \
                         (int)(QUEX_SETTING_BUFFER_MIN_FALLBACK_N)); \
           __quex_debug1("(before)\n");                              \
           __quex_debug_buffer_info(me->buffer);
           
#   define __quex_debug_reload_after(LR)                        \
           __quex_debug2("(after): %s", E_LoadResult_NAME(LR)); \
           __quex_debug_buffer_info(me->buffer);                \
           __quex_debug1("reload terminated _____"); 

#   define __quex_debug_counter()                        \
           QUEX_NAME(Counter_print_this)(&self.counter)


#else /* not defined(QUEX_OPTION_DEBUG_SHOW) */

#   define __quex_debug(FormatStr)                /* empty */
#   define __quex_debug1(Str)                     /* empty */
#   define __quex_debug2(FormatStr, Arg)          /* empty */
#   define __quex_debug3(FormatStr, Arg0, Arg1)   /* empty */

#   define __quex_debug_state(StateIdx)           \
           __quex_optional_statistics(StateIdx)
#   define __quex_debug_path_walker_state(PathWalkerIdx, PathBase, PathIterator) \
           __quex_optional_statistics(StateIdx)
#   define __quex_debug_template_state(TemplateID, StateKey) \
           __quex_optional_statistics(StateIdx)

#   define __quex_debug_drop_out(StateIdx)                                          /* empty */
#   define __quex_debug_path_walker_drop_out(PathWalkerIdx, PathBase, PathIterator) /* empty */
#   define __quex_debug_template_drop_out(TemplateID, StateKey)                     /* empty */ 

#   define __quex_debug_reload_before()           /* empty */
#   define __quex_debug_reload_after(LR)          /* empty */
#   define __quex_debug_counter()                 /* empty */

#endif /* ! QUEX_OPTION_DEBUG_SHOW */

#if  defined(QUEX_OPTION_DEBUG_SHOW_LOADS)

#   include <quex/code_base/buffer/Buffer_print>
#   define __quex_debug_buffer_load(BUFFER, Msg)                        \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, Msg);  \
           QUEX_NAME(Buffer_print_content_detailed)(BUFFER);            \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "\n");

#elif  defined(QUEX_OPTION_DEBUG_SHOW_LOADS) 

#   include <quex/code_base/buffer/Buffer_print>
#   define __quex_debug_buffer_load(BUFFER, Msg)                        \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, Msg);  \
           QUEX_NAME(Buffer_print_content_detailed)(BUFFER);            \
           __QUEX_STD_fprintf(QUEX_SETTING_DEBUG_OUTPUT_CHANNEL, "\n");
#else

#   define __quex_debug_buffer_load(BUFFER, Msg) /* empty */

#endif /* QUEX_OPTION_DEBUG_SHOW_LOADS */

#ifdef QUEX_OPTION_STATISTICS
#    define __quex_optional_statistics(StateIdx) \
            QUEX_NAME(statistics_state_count)(QUEX_NAME(statistics_state_ ## StateIdx), \
                                              *(me->buffer._read_p));
#else
#    define __quex_optional_statistics(StateIdx) /* empty */
#endif

#define __QUEX_MESSAGE_CHARACTER_ENCODING_SPECIFIED_WITHOUT_CONVERTER \
        "A character encoding name '%s' has been specified while the analyzer is not\n" \
        "setup to run with a converter (icu or iconv).\n" 

#define __QUEX_MESSAGE_ASSERTS_INFO \
        "## Disable this message by compile option\n"                               \
        "##        '-DQUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED'\n"              \
        "##\n"                                                                      \
        "## Asserts activated! Lexical analyzer is 'paranoid'!\n"                   \
        "## => Even smallest misbehavior causes program exit.\n"                    \
        "##    This helps to find subtile errors.\n"                                \
        "##\n"                                                                      \
        "## Note however: the paranoia is a heavy load on performance!\n"           \
        "##\n"                                                                      \
        "## Disable asserts by '-DQUEX_OPTION_ASSERTS_DISABLED'\n"                  \
        "##\n"                                                                      \
        "## Report any bug at\n"                                                    \
        "##        http://sourceforge.net/tracker/?group_id=168259&atid=846112\n" 

#define __QUEX_MESSAGE_MODE_STACK_OVERFLOW \
        "Error: Mode stack overflow. Adapt size of mode stack via the macro\n"      \
        "Error: QUEX_SETTING_MODE_STACK_SIZE, or review mode transitions.\n"        \
        "Error: I.e. check that for every GOSUB (push), there is a correspondent\n" \
        "Error: GOUP (pop)."

#define QUEX_ERROR_DEPRECATED(NAME, REPLACEMENT) \
        QUEX_ERROR_EXIT(NAME " has been deprecated\n"   \
                        "Please, use " REPLACEMENT ".")

#define ____QUEX_APPEND(X, Y)  X ## Y
#define __QUEX_APPEND(X, Y)    ____QUEX_APPEND(X, Y)

#define QUEX_STRING(X)            #X
#define QUEX_NUMBER_TO_STRING(x)  QUEX_STRING(x)
#define QUEX_SOURCE_POS()         __FILE__ ":" QUEX_NUMBER_TO_STRING(__LINE__) ": "

#if ! defined(QUEX_OPTION_TERMINATION_ZERO_DISABLED)

#   define QUEX_LEXEME_TERMINATING_ZERO_SET(BUFFER)        \
        (BUFFER)->_lexatom_at_lexeme_start = *((BUFFER)->_read_p); \
        *((BUFFER)->_read_p) = '\0';

#   define QUEX_LEXEME_TERMINATING_ZERO_UNDO(BUFFER)                   \
        /* only need to reset, in case that the terminating zero was set*/        \
        if( (BUFFER)->_lexatom_at_lexeme_start != (QUEX_TYPE_LEXATOM)'\0' ) { \
            *((BUFFER)->_read_p) = (BUFFER)->_lexatom_at_lexeme_start;         \
            (BUFFER)->_lexatom_at_lexeme_start = (QUEX_TYPE_LEXATOM)'\0';     \
        }
#else

#   define QUEX_LEXEME_TERMINATING_ZERO_SET(BUFFER)   /* empty */
#   define QUEX_LEXEME_TERMINATING_ZERO_UNDO(BUFFER)  /* empty */

#endif

#endif /* __QUEX_INCLUDE_GUARD__DEFINITIONS */
