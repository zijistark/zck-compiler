// -*- c++ -*-

start = MAIN;

header {
#include <cstdlib>  // for: atoi()
}

token {
  /* 
   * bit 12 indicates a scalar value ("VAL" in grammar)
   * bit 11 indicates an operator ("OP" in grammar)
   * bit 10 indicates an AST meta-token type
   * bit 9 indicates that the token has no value associated with it (usually punctuation tokens)
   *
   * note that the currently-used token ID type is 32-bit, so we've got a lot of room for such bitplay.
   */

  STRING      = 0b0000.1000.0000.0000;
  QSTRING     = 0b0000.1000.0000.0001;
  INTEGER     = 0b0000.1000.0000.0010;
  DECIMAL     = 0b0000.1000.0000.0011;
  DATE        = 0b0000.1000.0000.0100;
  QDATE       = 0b0000.1000.0000.0101;
  TITLE_ID    = 0b0000.1000.0000.0110;
  CHAR_SCOPE  = 0b0000.1000.0000.0111;

  OP_EQ       = 0b0000.0101.0000.0000;
  OP_DEQ      = 0b0000.0101.0000.1000;
  OP_LT       = 0b0000.0101.0000.1001;
  OP_LTEQ     = 0b0000.0101.0000.1010;
  OP_GT       = 0b0000.0101.0000.1011;
  OP_GTEQ     = 0b0000.0101.0000.1100;
  OP_NEQ      = 0b0000.0101.0000.1101;
  OPEN_BRACE  = 0b0000.0001.0000.0000;
  CLOSE_BRACE = 0b0000.0001.0000.0001;

  /* AST META-TOKENS (do not occur in input, but are used for identifying certain AST elements) */
  LIST        = 0b0000.0011.0000.0000;

  /* INCIDENCE TOKENS */
  TERMINATION   = 0x00;
  UNINITIALIZED = 0x01;
  FAILURE       = 0x02;

  /* INDENTATION INCIDENCE TOKENS
   * I haven't figured out how to get quex to stop generating these token IDs on its own, so we at least assign them explicit
   * values that won't interfere with our convenient binary organization (which is done so that we can query token types
   * with efficient set operations / bitmask fun).
   */
  NODENT        = 0x04;
  INDENT        = 0x05;
  DEDENT        = 0x06;
}

define {
  DATE       -?[1-9][0-9]{0,3}\.-?[0-9]{1,2}\.-?[0-9]{1,2}
  SIGN       (\-|\+)?
  DECIMAL    {SIGN}[0-9]*\.[0-9]+
  QSTRING    "\""[^"\r\n]*"\""
  CHAR_ID    c_[0-9]+
  TITLE_ID   [bcdek]_[a-zA-Z][a-zA-Z0-9_\-]+
  STRING     [^ \t\r\n<=>\{\}#\"]+
  MODULE     MODULE|module
  BEGIN      _*(BEGIN|begin):?
  END        _*(END|end):?
}


mode MAIN :
<skip:       [ \t\r\n]>
<skip_range: "#"  "\n">
{
  <<EOF>>         => T_TERMINATION;
  <<FAIL>>        => T_FAILURE(Lexeme);
  "=="            => T_OP_DEQ;
  "!="            => T_OP_NEQ;
  "="             => T_OP_EQ;
  "<="            => T_OP_LTEQ;
  "<"             => T_OP_LT;
  ">="            => T_OP_GTEQ;
  ">"             => T_OP_GT;
  "{"             => T_OPEN_BRACE;
  "}"             => T_CLOSE_BRACE;
  {SIGN}[0-9]+    => T_INTEGER(Lexeme);
  {DECIMAL}       => T_DECIMAL(Lexeme);
  {DATE}          => T_DATE(Lexeme);
  "\""{DATE}"\""  => T_QDATE(LexemeBegin+1, LexemeEnd-1);
  {QSTRING}       => T_QSTRING(LexemeBegin+1, LexemeEnd-1);
  {CHAR_ID}       => T_CHAR_SCOPE(Lexeme);
  {TITLE_ID}      => T_TITLE_ID(Lexeme);
  {STRING}        => T_STRING(Lexeme);
}



