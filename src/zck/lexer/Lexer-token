/* -*- C++ -*-   vim: set syntax=cpp: 
 * (C) 2004-2009 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY
 */
#ifndef __QUEX_INCLUDE_GUARD__TOKEN__GENERATED____QUEX____TOKEN
#define __QUEX_INCLUDE_GUARD__TOKEN__GENERATED____QUEX____TOKEN

#include <quex/code_base/definitions>
#include <quex/code_base/asserts>
#include <quex/code_base/compatibility/stdint.h>
#include <quex/code_base/MemoryManager>




#   line 2 "/quex/code_base/token/CppDefault.qx"

#include <iostream>
#include <string>

#include "Lexer-converter-cp1252"

#include <quex/code_base/lexeme>
   

#   line 27 "Lexer-token"

 
QUEX_NAMESPACE_TOKEN_OPEN

class Token;

inline void    QUEX_NAME_TOKEN(construct)(Token* __this);
inline void    QUEX_NAME_TOKEN(destruct)(Token* __this);
inline void    QUEX_NAME_TOKEN(copy)(Token*       me, 
                                     const Token* That);
inline bool    QUEX_NAME_TOKEN(take_text)(Token*             __this, 
                                          const QUEX_TYPE_LEXATOM*  Begin, 
                                          const QUEX_TYPE_LEXATOM*  End);

#ifdef QUEX_OPTION_TOKEN_REPETITION_SUPPORT
inline size_t  QUEX_NAME_TOKEN(repetition_n_get)(Token* __this);
inline void    QUEX_NAME_TOKEN(repetition_n_set)(Token* __this, 
                                                 size_t        N);
#endif 

inline const char*  
               QUEX_NAME_TOKEN(map_id_to_name)(const QUEX_TYPE_TOKEN_ID);


class QUEX_SETTING_USER_CLASS_DECLARATION_EPILOG Token {
public:
    Token();
    Token(const Token& That);
    /* operator=(..): USE WITH CAUTION--POSSIBLE MAJOR PERFORMANCE DECREASE! 
     *                BETTER USE __copy(That)                                */
    Token& operator=(const Token& That) 
    { QUEX_NAME_TOKEN(copy)(this, &That); return *this; }
    virtual ~Token();


#   line 15 "/quex/code_base/token/CppDefault.qx"
    const QUEX_TYPE_LEXATOM* text;

#   line 66 "Lexer-token"

#   line 16 "/quex/code_base/token/CppDefault.qx"
    size_t                   number;

#   line 71 "Lexer-token"


public:

#   line 15 "/quex/code_base/token/CppDefault.qx"
    const QUEX_TYPE_LEXATOM* get_text() const                           { return text; }
#   line 15 "/quex/code_base/token/CppDefault.qx"
    void                     set_text(const QUEX_TYPE_LEXATOM*& Value)  { text = Value; }
#   line 16 "/quex/code_base/token/CppDefault.qx"
    size_t                   get_number() const                         { return number; }
#   line 16 "/quex/code_base/token/CppDefault.qx"
    void                     set_number(size_t Value)                   { number = Value; }

#   line 85 "Lexer-token"

    void set(const QUEX_TYPE_TOKEN_ID ID) { id = ID; }
    void set(const QUEX_TYPE_TOKEN_ID ID, const  QUEX_TYPE_LEXATOM*& Value0, const size_t& Value1)
    { id = ID; text = Value0; number = Value1; }


    public:
        /* _line_n, _column_n, and id are public, so that the token policy 
         * can access it. making it private would imply complications for 
         * user customized token classes. The token policies should be the
         * same for C and Cpp.                                               */
        QUEX_TYPE_TOKEN_ID    id;
        QUEX_TYPE_TOKEN_ID    type_id() const                             { return id; }
        const char*           map_id_to_name(QUEX_TYPE_TOKEN_ID ID) const { return QUEX_NAME_TOKEN(map_id_to_name)(ID); }
        const std::string     type_id_name() const                        { return map_id_to_name(id); }

#   ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#       ifdef QUEX_OPTION_COUNTER_LINE
    public:
        QUEX_TYPE_TOKEN_LINE_N    _line_n;
        QUEX_TYPE_TOKEN_LINE_N    line_number() const                                 { return _line_n; }
        void                      set_line_number(const QUEX_TYPE_TOKEN_LINE_N Value) { _line_n = Value; }
#       endif
#       ifdef  QUEX_OPTION_COUNTER_COLUMN
    public:
        QUEX_TYPE_TOKEN_COLUMN_N  _column_n;
        QUEX_TYPE_TOKEN_COLUMN_N  column_number() const                                   { return _column_n; }
        void                      set_column_number(const QUEX_TYPE_TOKEN_COLUMN_N Value) { _column_n = Value; }
#       endif
#   endif
    public:
#   define self (*this)

#   line 117 "/quex/code_base/token/CppDefault.qx"

        operator 
        const std::string() const
        { return std::string(get_string()); }

        const std::string
        get_string() const 
        {
            std::string  tmp;
            tmp  = map_id_to_name(self.id);
            tmp += " '" + QUEX_NAME_TOKEN(lexeme_to_pretty_char)(self.text) + "'";
            return tmp;
        }
    
   

#   line 136 "Lexer-token"

#   undef  self

    private:
        friend void QUEX_NAME_TOKEN(copy)(Token*       __this, 
                                          const Token* That);
        friend bool QUEX_NAME_TOKEN(take_text)(Token*             __this, 
                                               const QUEX_TYPE_LEXATOM*  Begin, 
                                               const QUEX_TYPE_LEXATOM*  End);
};

QUEX_NAMESPACE_TOKEN_CLOSE


#   line 142 "/quex/code_base/token/CppDefault.qx"

QUEX_NAMESPACE_TOKEN_OPEN
inline std::ostream&
operator<<(std::ostream& ostr, const Token& Tok)
{ ostr << Tok.get_string(); return ostr; }
QUEX_NAMESPACE_TOKEN_CLOSE

#include "Lexer-converter-cp1252.i"

#include <quex/code_base/lexeme.i>
   

#   line 164 "Lexer-token"


QUEX_NAMESPACE_TOKEN_OPEN
extern QUEX_TYPE_LEXATOM   QUEX_NAME_TOKEN(LexemeNull);
QUEX_NAMESPACE_TOKEN_CLOSE


#endif /* __QUEX_INCLUDE_GUARD__TOKEN__GENERATED____QUEX____TOKEN */

/* This content is pasted into header, so the include guard is superfluous. 
 * It is left in place, so that if some time later the code generator is 
 * adapted to generate independent files, it will still work safely.          */
#ifndef __QUEX_INCLUDE_GUARD__TOKEN__GENERATED____QUEX____TOKEN_I
#define __QUEX_INCLUDE_GUARD__TOKEN__GENERATED____QUEX____TOKEN_I

#include <quex/code_base/definitions>
#include "Lexer-token"

QUEX_NAMESPACE_TOKEN_OPEN

QUEX_INLINE
Token::Token()
{
#   define self (*this)
#   define LexemeNull  (&QUEX_NAME_TOKEN(LexemeNull))

#   line 21 "/quex/code_base/token/CppDefault.qx"

       self.number = 0;
       self.text   = LexemeNull;
   

#   line 197 "Lexer-token"

#   undef  LexemeNull
#   undef  self
}

QUEX_INLINE
Token::Token(const Token& Other)
{
   QUEX_NAME_TOKEN(copy)(this, &Other);
#   define self (*this)
#   define LexemeNull  (&QUEX_NAME_TOKEN(LexemeNull))

#   line 21 "/quex/code_base/token/CppDefault.qx"

       self.number = 0;
       self.text   = LexemeNull;
   

#   line 216 "Lexer-token"

#   undef  LexemeNull
#   undef  self
}

QUEX_INLINE
Token::~Token()
{
#   define self (*this)
#   define LexemeNull  (&QUEX_NAME_TOKEN(LexemeNull))

#   line 26 "/quex/code_base/token/CppDefault.qx"

       if( self.text != LexemeNull ) {
           QUEXED(MemoryManager_free)((void*)self.text,
                                      E_MemoryObjectType_TEXT);
           self.text = LexemeNull;
       }
   

#   line 237 "Lexer-token"

#   undef  LexemeNull
#   undef  self
}

QUEX_INLINE void
QUEX_NAME_TOKEN(construct)(Token* __this)
{
    /* Explicit constructor call by 'placement new' */
    new ((void*)__this) Token;
}

QUEX_INLINE void
QUEX_NAME_TOKEN(destruct)(Token* __this)
{
    if( ! __this ) return;
    __this->Token::~Token();  
}

QUEX_INLINE void
QUEX_NAME_TOKEN(copy)(Token* __this, const Token* __That)
{
#   define self  (*__this)
#   define Other (*__That)
#   define LexemeNull  (&QUEX_NAME_TOKEN(LexemeNull))
    (void)__this;
    (void)__That;

#   line 34 "/quex/code_base/token/CppDefault.qx"

        self.id  = Other.id;

        if( self.text != LexemeNull ) {
            QUEXED(MemoryManager_free)((void*)self.text, E_MemoryObjectType_TEXT);
        }
        if( Other.text != LexemeNull ) {
            self.text = \
               (QUEX_TYPE_LEXATOM*)
               QUEXED(MemoryManager_allocate)(
                      sizeof(QUEX_TYPE_LEXATOM) * (QUEX_NAME_TOKEN(lexeme_length)(Other.text) + 1),
                      E_MemoryObjectType_TEXT);
            if( self.text ) {
                __QUEX_STD_memcpy((void*)self.text, (void*)Other.text, 
                                    sizeof(QUEX_TYPE_LEXATOM) 
                                  * (QUEX_NAME_TOKEN(lexeme_length)(Other.text) + 1));
            }
            else {
                self.text = LexemeNull;
            }
        }
        self.number = Other.number;
    #   ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
        __QUEX_IF_COUNT_LINES(self._line_n     = Other._line_n);
        __QUEX_IF_COUNT_COLUMNS(self._column_n = Other._column_n);
    #   endif
   

#   line 295 "Lexer-token"

#   undef LexemeNull
#   undef Other
#   undef self
   /* If the user even misses to copy the token id, then there's
    * something seriously wrong.                                 */
   __quex_assert(__this->id == __That->id);
#ifdef     QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
#   ifdef QUEX_OPTION_TOKEN_STAMPING_WITH_LINE_AND_COLUMN
    __QUEX_IF_COUNT_LINES(__quex_assert(__this->_line_n == __That->_line_n));
    __QUEX_IF_COUNT_COLUMNS(__quex_assert(__this->_column_n == __That->_column_n));
#   endif
#endif
}

QUEX_INLINE bool 
QUEX_NAME_TOKEN(take_text)(Token*              __this, 
                           const QUEX_TYPE_LEXATOM* Begin, 
                           const QUEX_TYPE_LEXATOM* End)
/* RETURNS: true -- if the token claims ownership over the given memory.
 *          false -- if no ownership is claimed.                             */
{
#   define self      (*__this)
#   define LexemeNull  (&QUEX_NAME_TOKEN(LexemeNull))
    (void)__this;

#   line 62 "/quex/code_base/token/CppDefault.qx"


#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1" */
        {
            const QUEX_TYPE_LEXATOM* it = (void*)0x0;
            printf("previous:  '");
            if( self.text != LexemeNull ) {
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
            printf("take_text: '");
            for(it = Begin; it != End; ++it) printf("%04X.", (int)*it);
            printf("%04X.", (int)*it);
            printf("'\n");
        }
#       endif

        if( self.text != LexemeNull ) {
            QUEXED(MemoryManager_free)((void*)self.text, E_MemoryObjectType_TEXT);
        }
        if( Begin != LexemeNull ) {
            __quex_assert(End >= Begin);
            self.text = \
                 (QUEX_TYPE_LEXATOM*)
                 QUEXED(MemoryManager_allocate)(
                              sizeof(QUEX_TYPE_LEXATOM) * (size_t)(End - Begin + 1), 
                              E_MemoryObjectType_TEXT);
            __QUEX_STD_memcpy((void*)self.text, (void*)Begin, 
                              sizeof(QUEX_TYPE_LEXATOM) * (size_t)(End - Begin));
            /* The string is not necessarily zero terminated, so terminate it here. */
            *((QUEX_TYPE_LEXATOM*)(self.text + (End - Begin))) = (QUEX_TYPE_LEXATOM)0;
        } else {
            self.text = LexemeNull;
        }

#       if 0
        /* Hint for debug: To check take_text change "#if 0" to "#if 1"       */
        {
            const QUEX_TYPE_LEXATOM* it = 0x0;
            printf("after:     '");
            if( self.text != LexemeNull ) { 
                for(it = self.text; *it ; ++it) printf("%04X.", (int)*it);
                printf("%04X.", (int)*it);
            }
            printf("'\n");
        }
#       endif

        /* This token copied the text from the chunk into the string, 
         * so we do not claim ownership over it.                             */
        return false;
   

#   line 378 "Lexer-token"

#   undef  LexemeNull
#   undef  self
    /* Default: no ownership.                                                */
    return false;
}

#ifdef QUEX_OPTION_TOKEN_REPETITION_SUPPORT
QUEX_INLINE size_t 
QUEX_NAME_TOKEN(repetition_n_get)(Token* __this)
{
#   define self (*__this)
    (void)__this;

#   line 138 "/quex/code_base/token/CppDefault.qx"

       return self.number;
   

#   line 398 "Lexer-token"

#   undef self
}

QUEX_INLINE void 
QUEX_NAME_TOKEN(repetition_n_set)(Token* __this, size_t N)
{
#   define self (*__this)
    (void)__this;
    (void)N;

#   line 134 "/quex/code_base/token/CppDefault.qx"

       self.number = N;
   

#   line 415 "Lexer-token"

#   undef  self
}
#endif /* QUEX_OPTION_TOKEN_REPETITION_SUPPORT */

QUEX_INLINE const char*
QUEX_NAME_TOKEN(map_id_to_name)(const QUEX_TYPE_TOKEN_ID TokenID)
{
   static char  error_string[64];

   /* NOTE: This implementation works only for token id types that are 
    *       some type of integer or enum. In case an alien type is to
    *       used, this function needs to be redefined.                  */
   switch( TokenID ) {
   default: {
       __QUEX_STD_sprintf(error_string, "<UNKNOWN TOKEN-ID: %i>", (int)TokenID);
       return error_string;
   }

   case T_TERMINATION:    return "<TERMINATION>";
   case T_UNINITIALIZED:  return "<UNINITIALIZED>";
#  if defined(QUEX_OPTION_INDENTATION_TRIGGER)
   case T_INDENT:         return "<INDENT>";
   case T_DEDENT:         return "<DEDENT>";
   case T_NODENT:         return "<NODENT>";
#  endif
   case T_ANY_ALLIED_CHARACTER:                 return "ANY_ALLIED_CHARACTER";
   case T_ANY_ARMY:                             return "ANY_ARMY";
   case T_ANY_ARTIFACT:                         return "ANY_ARTIFACT";
   case T_ANY_ATTACKER:                         return "ANY_ATTACKER";
   case T_ANY_BACKED_CHARACTER:                 return "ANY_BACKED_CHARACTER";
   case T_ANY_CHARACTER:                        return "ANY_CHARACTER";
   case T_ANY_CHILD:                            return "ANY_CHILD";
   case T_ANY_CHILD_EVEN_IF_DEAD:               return "ANY_CHILD_EVEN_IF_DEAD";
   case T_ANY_CLAIM:                            return "ANY_CLAIM";
   case T_ANY_CLAIMANT:                         return "ANY_CLAIMANT";
   case T_ANY_CLOSE_RELATIVE:                   return "ANY_CLOSE_RELATIVE";
   case T_ANY_CONSORT:                          return "ANY_CONSORT";
   case T_ANY_CONTROLLED_UNIT:                  return "ANY_CONTROLLED_UNIT";
   case T_ANY_COURTIER:                         return "ANY_COURTIER";
   case T_ANY_COURTIER_OR_VASSAL:               return "ANY_COURTIER_OR_VASSAL";
   case T_ANY_CURRENT_ENEMY:                    return "ANY_CURRENT_ENEMY";
   case T_ANY_DEFENDER:                         return "ANY_DEFENDER";
   case T_ANY_DEMESNE_PROVINCE:                 return "ANY_DEMESNE_PROVINCE";
   case T_ANY_DEMESNE_TITLE:                    return "ANY_DEMESNE_TITLE";
   case T_ANY_DE_JURE_LIEGE_TITLE:              return "ANY_DE_JURE_LIEGE_TITLE";
   case T_ANY_DE_JURE_VASSAL:                   return "ANY_DE_JURE_VASSAL";
   case T_ANY_DE_JURE_VASSAL_TITLE:             return "ANY_DE_JURE_VASSAL_TITLE";
   case T_ANY_DIRECT_DE_JURE_VASSAL_TITLE:      return "ANY_DIRECT_DE_JURE_VASSAL_TITLE";
   case T_ANY_DYNASTY_MEMBER:                   return "ANY_DYNASTY_MEMBER";
   case T_ANY_DYNASTY_MEMBER_EVEN_IF_DEAD:      return "ANY_DYNASTY_MEMBER_EVEN_IF_DEAD";
   case T_ANY_ENEMY_PLOTTER:                    return "ANY_ENEMY_PLOTTER";
   case T_ANY_FACTION_BACKER:                   return "ANY_FACTION_BACKER";
   case T_ANY_FAVOR_HOLDER:                     return "ANY_FAVOR_HOLDER";
   case T_ANY_FAVOR_OWER:                       return "ANY_FAVOR_OWER";
   case T_ANY_FLEET:                            return "ANY_FLEET";
   case T_ANY_FRIEND:                           return "ANY_FRIEND";
   case T_ANY_HEIR_TITLE:                       return "ANY_HEIR_TITLE";
   case T_ANY_HOST_COURTIER:                    return "ANY_HOST_COURTIER";
   case T_ANY_INDEPENDENT_RULER:                return "ANY_INDEPENDENT_RULER";
   case T_ANY_KNOWN_ENEMY_PLOTTER:              return "ANY_KNOWN_ENEMY_PLOTTER";
   case T_ANY_KNOWN_PLOTTER:                    return "ANY_KNOWN_PLOTTER";
   case T_ANY_LANDED_TITLE:                     return "ANY_LANDED_TITLE";
   case T_ANY_LIEGE:                            return "ANY_LIEGE";
   case T_ANY_LOVER:                            return "ANY_LOVER";
   case T_ANY_MERCENARY_BAND:                   return "ANY_MERCENARY_BAND";
   case T_ANY_NEIGHBOR_INDEPENDENT_RULER:       return "ANY_NEIGHBOR_INDEPENDENT_RULER";
   case T_ANY_NEIGHBOR_PROVINCE:                return "ANY_NEIGHBOR_PROVINCE";
   case T_ANY_NON_AGGRESSION_PACT_CHARACTER:    return "ANY_NON_AGGRESSION_PACT_CHARACTER";
   case T_ANY_OPINION_MODIFIER_TARGET:          return "ANY_OPINION_MODIFIER_TARGET";
   case T_ANY_PLAYABLE_RULER:                   return "ANY_PLAYABLE_RULER";
   case T_ANY_PLAYER:                           return "ANY_PLAYER";
   case T_ANY_PLOTTER:                          return "ANY_PLOTTER";
   case T_ANY_PLOT_BACKER:                      return "ANY_PLOT_BACKER";
   case T_ANY_POTENTIAL_TRIBAL_COUNTY:          return "ANY_POTENTIAL_TRIBAL_COUNTY";
   case T_ANY_PRETENDER_TITLE:                  return "ANY_PRETENDER_TITLE";
   case T_ANY_PREVIOUS_HOLDER:                  return "ANY_PREVIOUS_HOLDER";
   case T_ANY_PROVINCE:                         return "ANY_PROVINCE";
   case T_ANY_PROVINCE_CHARACTER:               return "ANY_PROVINCE_CHARACTER";
   case T_ANY_PROVINCE_HOLDING:                 return "ANY_PROVINCE_HOLDING";
   case T_ANY_PROVINCE_LORD:                    return "ANY_PROVINCE_LORD";
   case T_ANY_PUPIL:                            return "ANY_PUPIL";
   case T_ANY_QUESTER:                          return "ANY_QUESTER";
   case T_ANY_QUESTER_TARGETTING_THIS:          return "ANY_QUESTER_TARGETTING_THIS";
   case T_ANY_QUEST_TARGET:                     return "ANY_QUEST_TARGET";
   case T_ANY_REALM_CHARACTER:                  return "ANY_REALM_CHARACTER";
   case T_ANY_REALM_LORD:                       return "ANY_REALM_LORD";
   case T_ANY_REALM_PROVINCE:                   return "ANY_REALM_PROVINCE";
   case T_ANY_REALM_TITLE:                      return "ANY_REALM_TITLE";
   case T_ANY_RIVAL:                            return "ANY_RIVAL";
   case T_ANY_SIBLING:                          return "ANY_SIBLING";
   case T_ANY_SIBLING_EVEN_IF_DEAD:             return "ANY_SIBLING_EVEN_IF_DEAD";
   case T_ANY_SOCIETY_MEMBER:                   return "ANY_SOCIETY_MEMBER";
   case T_ANY_SPOUSE:                           return "ANY_SPOUSE";
   case T_ANY_SPOUSE_EVEN_IF_DEAD:              return "ANY_SPOUSE_EVEN_IF_DEAD";
   case T_ANY_SUZERAIN:                         return "ANY_SUZERAIN";
   case T_ANY_TITLE:                            return "ANY_TITLE";
   case T_ANY_TITLE_UNDER:                      return "ANY_TITLE_UNDER";
   case T_ANY_TRADE_POST:                       return "ANY_TRADE_POST";
   case T_ANY_TRADE_ROUTE_PROVINCE:             return "ANY_TRADE_ROUTE_PROVINCE";
   case T_ANY_TRIBUTARY:                        return "ANY_TRIBUTARY";
   case T_ANY_UNIQUE_DYNASTY_VASSAL:            return "ANY_UNIQUE_DYNASTY_VASSAL";
   case T_ANY_UNIT:                             return "ANY_UNIT";
   case T_ANY_UNKNOWN_ENEMY_PLOTTER:            return "ANY_UNKNOWN_ENEMY_PLOTTER";
   case T_ANY_VASSAL:                           return "ANY_VASSAL";
   case T_ANY_VOTER:                            return "ANY_VOTER";
   case T_ANY_WAR:                              return "ANY_WAR";
   case T_ANY_WARD:                             return "ANY_WARD";
   case T_CHAR_SCOPE:                           return "CHAR_SCOPE";
   case T_DATE:                                 return "DATE";
   case T_DECIMAL:                              return "DECIMAL";
   case T_DO:                                   return "DO";
   case T_ELSIF:                                return "ELSIF";
   case T_FAILURE:                              return "FAILURE";
   case T_IF:                                   return "IF";
   case T_INTEGER:                              return "INTEGER";
   case T_LIST:                                 return "LIST";
   case T_L_BRACE:                              return "L_BRACE";
   case T_L_PAREN:                              return "L_PAREN";
   case T_OP_ADD:                               return "OP_ADD";
   case T_OP_ADD_ASSIGN:                        return "OP_ADD_ASSIGN";
   case T_OP_ASSIGN:                            return "OP_ASSIGN";
   case T_OP_DEQ:                               return "OP_DEQ";
   case T_OP_DIV:                               return "OP_DIV";
   case T_OP_DIV_ASSIGN:                        return "OP_DIV_ASSIGN";
   case T_OP_EQ:                                return "OP_EQ";
   case T_OP_GT:                                return "OP_GT";
   case T_OP_GTEQ:                              return "OP_GTEQ";
   case T_OP_LT:                                return "OP_LT";
   case T_OP_LTEQ:                              return "OP_LTEQ";
   case T_OP_MUL:                               return "OP_MUL";
   case T_OP_MUL_ASSIGN:                        return "OP_MUL_ASSIGN";
   case T_OP_NEQ:                               return "OP_NEQ";
   case T_OP_SUB:                               return "OP_SUB";
   case T_OP_SUB_ASSIGN:                        return "OP_SUB_ASSIGN";
   case T_QDATE:                                return "QDATE";
   case T_QSTRING:                              return "QSTRING";
   case T_RANDOM_ALLIED_CHARACTER:              return "RANDOM_ALLIED_CHARACTER";
   case T_RANDOM_ARMY:                          return "RANDOM_ARMY";
   case T_RANDOM_ARTIFACT:                      return "RANDOM_ARTIFACT";
   case T_RANDOM_BACKED_CHARACTER:              return "RANDOM_BACKED_CHARACTER";
   case T_RANDOM_CHARACTER:                     return "RANDOM_CHARACTER";
   case T_RANDOM_CHILD:                         return "RANDOM_CHILD";
   case T_RANDOM_CHILD_EVEN_IF_DEAD:            return "RANDOM_CHILD_EVEN_IF_DEAD";
   case T_RANDOM_CLAIM:                         return "RANDOM_CLAIM";
   case T_RANDOM_CLOSE_RELATIVE:                return "RANDOM_CLOSE_RELATIVE";
   case T_RANDOM_CONSORT:                       return "RANDOM_CONSORT";
   case T_RANDOM_CONTROLLED_UNIT:               return "RANDOM_CONTROLLED_UNIT";
   case T_RANDOM_COURTIER:                      return "RANDOM_COURTIER";
   case T_RANDOM_COURTIER_OR_VASSAL:            return "RANDOM_COURTIER_OR_VASSAL";
   case T_RANDOM_CURRENT_ENEMY:                 return "RANDOM_CURRENT_ENEMY";
   case T_RANDOM_DEMESNE_PROVINCE:              return "RANDOM_DEMESNE_PROVINCE";
   case T_RANDOM_DEMESNE_TITLE:                 return "RANDOM_DEMESNE_TITLE";
   case T_RANDOM_DIRECT_DE_JURE_VASSAL_TITLE:   return "RANDOM_DIRECT_DE_JURE_VASSAL_TITLE";
   case T_RANDOM_DYNASTY_MEMBER:                return "RANDOM_DYNASTY_MEMBER";
   case T_RANDOM_DYNASTY_MEMBER_EVEN_IF_DEAD:   return "RANDOM_DYNASTY_MEMBER_EVEN_IF_DEAD";
   case T_RANDOM_ENEMY_PLOTTER:                 return "RANDOM_ENEMY_PLOTTER";
   case T_RANDOM_FLEET:                         return "RANDOM_FLEET";
   case T_RANDOM_FRIEND:                        return "RANDOM_FRIEND";
   case T_RANDOM_HOST_COURTIER:                 return "RANDOM_HOST_COURTIER";
   case T_RANDOM_INDEPENDENT_RULER:             return "RANDOM_INDEPENDENT_RULER";
   case T_RANDOM_KNOWN_ENEMY_PLOTTER:           return "RANDOM_KNOWN_ENEMY_PLOTTER";
   case T_RANDOM_LANDED_TITLE:                  return "RANDOM_LANDED_TITLE";
   case T_RANDOM_LOVER:                         return "RANDOM_LOVER";
   case T_RANDOM_NEIGHBOR_INDEPENDENT_RULER:    return "RANDOM_NEIGHBOR_INDEPENDENT_RULER";
   case T_RANDOM_NEIGHBOR_PROVINCE:             return "RANDOM_NEIGHBOR_PROVINCE";
   case T_RANDOM_NON_AGGRESSION_PACT_CHARACTER: return "RANDOM_NON_AGGRESSION_PACT_CHARACTER";
   case T_RANDOM_OPINION_MODIFIER_TARGET:       return "RANDOM_OPINION_MODIFIER_TARGET";
   case T_RANDOM_PLAYABLE_RULER:                return "RANDOM_PLAYABLE_RULER";
   case T_RANDOM_PLAYER:                        return "RANDOM_PLAYER";
   case T_RANDOM_POTENTIAL_TRIBAL_COUNTY:       return "RANDOM_POTENTIAL_TRIBAL_COUNTY";
   case T_RANDOM_PROVINCE:                      return "RANDOM_PROVINCE";
   case T_RANDOM_PROVINCE_CHARACTER:            return "RANDOM_PROVINCE_CHARACTER";
   case T_RANDOM_PROVINCE_HOLDING:              return "RANDOM_PROVINCE_HOLDING";
   case T_RANDOM_PROVINCE_LORD:                 return "RANDOM_PROVINCE_LORD";
   case T_RANDOM_PUPIL:                         return "RANDOM_PUPIL";
   case T_RANDOM_QUESTER:                       return "RANDOM_QUESTER";
   case T_RANDOM_QUESTER_TARGETTING_THIS:       return "RANDOM_QUESTER_TARGETTING_THIS";
   case T_RANDOM_QUEST_TARGET:                  return "RANDOM_QUEST_TARGET";
   case T_RANDOM_REALM_CHARACTER:               return "RANDOM_REALM_CHARACTER";
   case T_RANDOM_REALM_LORD:                    return "RANDOM_REALM_LORD";
   case T_RANDOM_REALM_PROVINCE:                return "RANDOM_REALM_PROVINCE";
   case T_RANDOM_REALM_TITLE:                   return "RANDOM_REALM_TITLE";
   case T_RANDOM_RIVAL:                         return "RANDOM_RIVAL";
   case T_RANDOM_SIBLING:                       return "RANDOM_SIBLING";
   case T_RANDOM_SIBLING_EVEN_IF_DEAD:          return "RANDOM_SIBLING_EVEN_IF_DEAD";
   case T_RANDOM_SOCIETY_MEMBER:                return "RANDOM_SOCIETY_MEMBER";
   case T_RANDOM_SPOUSE:                        return "RANDOM_SPOUSE";
   case T_RANDOM_SPOUSE_EVEN_IF_DEAD:           return "RANDOM_SPOUSE_EVEN_IF_DEAD";
   case T_RANDOM_TRADE_POST:                    return "RANDOM_TRADE_POST";
   case T_RANDOM_TRIBUTARY:                     return "RANDOM_TRIBUTARY";
   case T_RANDOM_UNIT:                          return "RANDOM_UNIT";
   case T_RANDOM_UNKNOWN_ENEMY_PLOTTER:         return "RANDOM_UNKNOWN_ENEMY_PLOTTER";
   case T_RANDOM_VASSAL:                        return "RANDOM_VASSAL";
   case T_RANDOM_VOTER:                         return "RANDOM_VOTER";
   case T_RANDOM_WARD:                          return "RANDOM_WARD";
   case T_R_BRACE:                              return "R_BRACE";
   case T_R_PAREN:                              return "R_PAREN";
   case T_STRING:                               return "STRING";
   case T_THEN:                                 return "THEN";
   case T_TITLE_ID:                             return "TITLE_ID";
   case T_VAR_REF:                              return "VAR_REF";
   case T_WHILE:                                return "WHILE";


   }
}

QUEX_NAMESPACE_TOKEN_CLOSE


#endif /* __QUEX_INCLUDE_GUARD__TOKEN__GENERATED____QUEX____TOKEN_I */
